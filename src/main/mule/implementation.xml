<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
	<flow name="PostDocumentToGetOCR" doc:id="6301cde8-d85a-4285-9c7f-8055e97972fb" >
		<set-variable value="#[%dw 2.0&#10;output application/json skipNullOn=&quot;everywhere&quot;&#10;import generateSecureAWSHeaders from dwCanonicalMakerFunction::Auth&#10;---&#10;generateSecureAWSHeaders(&#10;	'POST', &#10;	'us-east-2', &#10;	'textract',&#10;	'Textract.AnalyzeDocument', &#10;	'/', &#10;	'', &#10;	payload, &#10;	'AKIAUWNDIVUDDLY6MI6S', &#10;	'SJZQXM68tTcBroA4G1U2dUYKA6htQi9kBbXfFxUw'&#10;	)]" doc:name="Set headers" doc:id="9b68a7ac-74ac-4eb1-9d24-9fc7292a2e2c" variableName="headers"/>
		<http:request method="POST" doc:name="Request to aws service API" doc:id="efee376d-4ced-406f-a0b5-0771d632ff17" url='#["https://" ++ vars.headers.host]'>
			<http:headers ><![CDATA[#[vars.headers]]]></http:headers>
		</http:request>
		<ee:transform doc:name="payload to confor JSON" doc:id="efa4419f-0dce-4ef5-ab6c-78a14ce4d2d8">
			<ee:message>
				<ee:set-payload><![CDATA[%dw 2.0
output application/json

import * from dw::core::Arrays

var allBlocks = read(payload,"application/json").Blocks

fun searchChildren(childIds) = (allBlocks filter (childIds contains $.Id))
fun searchLastChildren(childIds) =  if(isEmpty(getRelationships(searchChildren(childIds))))
                                    searchChildren(childIds) 
                                    else  
                                    searchLastChildren(getRelationshipsType(searchChildren(childIds), "CHILD"))
fun getRelationships(block) = flatten(block..Relationships)
fun getRelationshipsType(block, relationType) = flatten((getRelationships(block) filter $.Type == relationType).Ids)
fun getEntityTypes(entityType) = flatten(allBlocks filter ($.EntityTypes contains entityType))
fun searchBlockType(blockType) = flatten((allBlocks filter ((item, index) -> item.BlockType == blockType)))
fun getTableEntity(tableBlock, entity) = getEntityTypes(entity) map {
    positionX: $.ColumnIndex,
    positionY: $.RowIndex,
    value: searchChildren(getRelationshipsType($, "CHILD"))..Text joinBy " "
}
fun getTableValues(tableBlock) = (tableBlock filter $.EntityTypes == null) map {
    positionY: $.RowIndex,
    positionX: $.ColumnIndex,
    value: searchChildren(getRelationshipsType($, "CHILD"))..Text joinBy " "
}

 
var valuesTables = getTableValues(searchChildren(getRelationshipsType(searchBlockType("TABLE"),"CHILD")))

var articles =  (valuesTables groupBy $.positionY pluck $) map {
    article_id: ($ filter $.positionX == 1).value[0],
    number: ($ filter $.positionX == 2).value[0]
}
 
 var keyValues = getEntityTypes("KEY") map ((item,index)->{
	key: (searchChildren(getRelationshipsType(item,"CHILD"))..Text )[0] replace /([:])/ with "" as String ,
	value: (searchLastChildren(getRelationshipsType(item,"VALUE"))..Text)[0] 
	
})



---
{
	"order_id": (keyValues filter ($.key == "order_id")).value[0],
  	"client_id": (keyValues filter ($.key == "client_id")).value[0],
  	"articles": articles	
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
	</flow>
</mule>
